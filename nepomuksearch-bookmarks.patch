Index: nepomuksearchrunner.cpp
===================================================================
--- nepomuksearchrunner.cpp	(revisión: 1005720)
+++ nepomuksearchrunner.cpp	(copia de trabajo)
@@ -30,6 +30,8 @@
 
 #include <Nepomuk/Resource>
 #include <Nepomuk/ResourceManager>
+#include <nepomuk/ontologies/bookmark.h>
+#include <nepomuk/ontologies/dataobject.h>
 
 #include <Soprano/Vocabulary/NAO>
 
@@ -77,6 +79,8 @@
 
     m_actions = new KFileItemActions(this);
     addSyntax(Plasma::RunnerSyntax(":q:", i18n("Finds files, documents and other content that matches :q: using the desktop search system.")));
+    
+    kDebug();
 }
 
 
@@ -132,6 +136,12 @@
     if (res.hasType( Soprano::Vocabulary::NAO::Tag())) {
         url.setProtocol("nepomuksearch");
         url.setPath(QString("/hasTag:\"%1\"").arg(res.genericLabel()));
+    } else if(res.hasType(Nepomuk::Bookmark::resourceTypeUri())) {
+        Nepomuk::Bookmark bookmark(res);
+        if(!bookmark.bookmarkses().empty())
+            url = bookmark.bookmarkses().first().label();
+        else
+            url = res.resourceUri();
     } else {
         url = res.resourceUri();
     }
@@ -141,6 +151,7 @@
 
 QList<QAction*> Nepomuk::SearchRunner::actionsForMatch(const Plasma::QueryMatch &match)
 {
+    kDebug() << "YEAHHHHHHHHHHHHHHH";
     //Unlike other runners, the actions generated here are likely to see
     //little reuse. Hence, we will clear the actions then generate new
     //ones per iteration to avoid excessive memory consumption.
@@ -155,7 +166,19 @@
 
     Nepomuk::Resource res = match.data().value<Nepomuk::Resource>();
 
-    KUrl url(res.resourceUri());
+    kDebug() << res.resourceUri();
+    KUrl url;
+    
+    if(res.hasType(Nepomuk::Bookmark::resourceTypeUri())) {
+        Nepomuk::Bookmark bookmark(res);
+        if(!bookmark.bookmarkses().empty())
+            url = bookmark.bookmarkses().first().label();
+        else
+            url = res.resourceUri();
+    } else {
+        url = res.resourceUri();
+    }
+    
     KIO::UDSEntry entry;
     if (!KIO::NetAccess::stat(url.path(), entry, 0)) {
         return QList<QAction*>();
Index: queryclientwrapper.cpp
===================================================================
--- queryclientwrapper.cpp	(revisión: 1005720)
+++ queryclientwrapper.cpp	(copia de trabajo)
@@ -25,6 +25,8 @@
 
 #include <Nepomuk/Resource>
 #include <Nepomuk/Types/Class>
+#include <nepomuk/ontologies/bookmark.h>
+#include <nepomuk/ontologies/dataobject.h>
 
 #include <Soprano/Vocabulary/Xesam>
 
@@ -97,21 +99,31 @@
         match.setRelevance(normalizeScore(result.score()));
 
         Nepomuk::Resource res(result.resourceUri());
-
-        QString type;
+        
+        // Defaults
+        QString text = res.genericLabel();
+        QString subtext = Nepomuk::Types::Class(res.resourceType()).label();
+        QString s = res.genericIcon();
+        KIcon icon = KIcon(s.isEmpty() ? QString("nepomuk") : s);
+        
         if (res.hasType(Soprano::Vocabulary::Xesam::File()) ||
             res.resourceUri().scheme() == "file") {
-            type = KMimeType::findByUrl(res.resourceUri())->comment();
-        } else {
-            type = Nepomuk::Types::Class(res.resourceType()).label();
+            subtext = KMimeType::findByUrl(res.resourceUri())->comment();
+        } else if(res.hasType(Nepomuk::Bookmark::resourceTypeUri())) {
+            Nepomuk::Bookmark bookmark(res);
+            if(!bookmark.titles().empty())
+                text = bookmark.titles().first();
+            
+            if(!bookmark.bookmarkses().empty())
+                subtext = bookmark.bookmarkses().first().label();
+        
+            icon = KIcon(s.isEmpty() ? QString("bookmarks") : s);
         }
 
-        match.setText(res.genericLabel());
-        match.setSubtext(type);
+        match.setText(text);
+        match.setSubtext(subtext);
+        match.setIcon(icon);
 
-        QString s = res.genericIcon();
-        match.setIcon(KIcon(s.isEmpty() ? QString("nepomuk") : s));
-
         match.setData(qVariantFromValue(res));
         match.setId(res.resourceUri().toString());
         matches << match;
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revisión: 1005720)
+++ CMakeLists.txt	(copia de trabajo)
@@ -25,6 +25,7 @@
   ${KDE4_PLASMA_LIBS}
   nepomukquery
   nepomukqueryclient
+  ontologies
 )
 
 install(
