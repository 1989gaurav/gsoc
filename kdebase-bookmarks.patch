Index: apps/konqueror/src/konqextendedbookmarkmenuhelper.h
===================================================================
--- apps/konqueror/src/konqextendedbookmarkmenuhelper.h	(revision 0)
+++ apps/konqueror/src/konqextendedbookmarkmenuhelper.h	(revision 0)
@@ -0,0 +1,54 @@
+/* This file is part of the KDE project
+   Copyright (C) 2003 Alexander Kellett <lypanov@kde.org>
+   Copyright (C) 1998, 1999 Simon Hausmann <hausmann@kde.org>
+
+   This program is free software; you can redistribute it and/or
+   modify it under the terms of the GNU General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; see the file COPYING.  If not, write to
+   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.
+*/
+#ifndef KONQEXTENDEDBOOKMARKMENUHELPER_H
+#include <config-konqueror.h>
+#ifdef HAVE_KONQBOOKMARK
+#define KONQEXTENDEDBOOKMARKMENUHELPER_H
+
+#include <konqbookmark/konqbookmarkmodelmenu.h>
+#include "konqmainwindow.h"
+
+class KonqExtendedBookmarkMenuHelper : public KonqBookmarkMenuHelper
+{
+public:
+    KonqExtendedBookmarkMenuHelper(KonqMainWindow *w);
+    virtual ~KonqExtendedBookmarkMenuHelper() {}
+    
+    virtual KonqBookmark currentPlace() const;
+    virtual bool supportsTabs() const;
+    virtual QList<KonqBookmark> currentPlacesList() const;
+    virtual bool enableOption(QString) const { return true; /* Enable all options */ }
+    
+    virtual void openInNewTabs(const QList<KUrl> &urls);
+    
+    virtual void openBookmark(const KUrl& url);
+    virtual void openInNewTab(const KUrl &url);
+    virtual void openInNewWindow(const KUrl &url);
+    
+    virtual void createNewFolder(Akonadi::Collection parent) { /* TODO: Create folder dialog */ }
+    virtual void addBookmark(Akonadi::Collection parent) { /* TODO: add Bookmark dialog */ }
+    virtual void editBookmarks() { /* TODO: Launch editor */ }
+    
+private:
+    KonqMainWindow *m_pKonqMainWindow;
+};
+
+#endif
+#endif /* KONQEXTENDEDBOOKMARKMENUHELPER_H */
Index: apps/konqueror/src/konqmainwindow.h
===================================================================
--- apps/konqueror/src/konqmainwindow.h	(revision 1040547)
+++ apps/konqueror/src/konqmainwindow.h	(working copy)
@@ -36,6 +36,7 @@
 #include <kparts/mainwindow.h>
 #include <kglobalsettings.h>
 #include <kservice.h>
+#include <config-konqueror.h>
 #include "konqcombo.h"
 #include "konqframe.h"
 #include "konqframecontainer.h"
@@ -84,6 +85,7 @@
 }
 
 class KonqExtendedBookmarkOwner;
+class KonqExtendedBookmarkMenuHelper;
 
 
 class KONQ_TESTS_EXPORT KonqMainWindow : public KParts::MainWindow, public KonqFrameContainerBase
@@ -113,8 +115,16 @@
      * Filters the URL and calls the main openUrl method.
      */
     void openFilteredUrl(const QString& url, const KonqOpenURLRequest& req);
-
+    
     /**
+     * Functions called by KonqExtendedBookmarkOwner and KonqExtendedBookmarkMenuHelper.
+     */
+#ifdef HAVE_KONQBOOKMARK
+    void openBookmark(const KUrl& url, Qt::MouseButtons mb, Qt::KeyboardModifiers km);
+    void openBookmark(const KUrl& url);
+    void openInNewTabs(const QList<KUrl> &urls);
+#endif
+    /**
      * Convenience overload for openFilteredUrl(url, req)
      */
     void openFilteredUrl(const QString& url, bool inNewTab = false, bool tempFile = false);
@@ -702,7 +712,10 @@
   QPointer<KonqView> m_currentView;
 
   KBookmarkMenu* m_pBookmarkMenu;
+#ifdef HAVE_KONQBOOKMARK
   KonqExtendedBookmarkOwner *m_pBookmarksOwner;
+#endif
+  KonqExtendedBookmarkMenuHelper *m_pBookmarksMenuHelper;
   KActionCollection* m_bookmarksActionCollection;
   bool m_bookmarkBarInitialized;
 
Index: apps/konqueror/src/config-konqueror.h.cmake
===================================================================
--- apps/konqueror/src/config-konqueror.h.cmake	(revision 1040547)
+++ apps/konqueror/src/config-konqueror.h.cmake	(working copy)
@@ -13,3 +13,6 @@
 /* mallinfo() is available in <stdlib.h> */
 #cmakedefine KDE_MALLINFO_STDLIB 1
 
+/* For the new bookmarks */
+#cmakedefine HAVE_KONQBOOKMARK 1
+
Index: apps/konqueror/src/konqmainwindow.cpp
===================================================================
--- apps/konqueror/src/konqmainwindow.cpp	(revision 1040547)
+++ apps/konqueror/src/konqmainwindow.cpp	(working copy)
@@ -47,7 +47,16 @@
 #include "konqbookmarkbar.h"
 #include "konqundomanager.h"
 #include "konqhistorydialog.h"
-#include <config-konqueror.h>
+#ifdef HAVE_KONQBOOKMARK
+#include <akonadi/monitor.h>
+#include <akonadi/session.h>
+#include <akonadi/control.h>
+#include <Nepomuk/ResourceManager> 
+#include <konqbookmark/konqbookmark.h>
+#include <konqbookmark/konqbookmarkmodel.h>
+#include <konqbookmark/placesmanager.h>
+#include "konqextendedbookmarkmenuhelper.h"
+#endif
 #include <kstringhandler.h>
 
 #include <konq_events.h>
@@ -175,6 +184,14 @@
    m_pKonqMainWindow = w;
 }
 
+#ifdef HAVE_KONQBOOKMARK
+KonqExtendedBookmarkMenuHelper::KonqExtendedBookmarkMenuHelper(KonqMainWindow *w)
+{
+    m_pKonqMainWindow = w;
+}
+#endif
+
+
 KonqMainWindow::KonqMainWindow( const KUrl &initialURL, const QString& xmluiFile)
     : KParts::MainWindow()
     , m_paClosedItems(0)
@@ -3825,7 +3842,23 @@
   // Bookmarks menu
   m_pamBookmarks = new KBookmarkActionMenu(s_bookmarkManager->root(),
                                               i18n( "&Bookmarks" ), this);
-  actionCollection()->addAction( "bookmarks", m_pamBookmarks );
+  #ifndef HAVE_KONQBOOKMARK
+    actionCollection()->addAction( "bookmarks", m_pamBookmarks );
+  #else
+    Nepomuk::ResourceManager::instance()->init();
+    
+    if ( !Akonadi::Control::start() ) {
+        kError() << "Unable to start Akonadi server";
+    }
+    
+    Akonadi::KonqBookmarkModel* bookmarkModel = Konqueror::PlacesManager::self()->bookmarkModel();
+    KonqBookmarkModelMenu* bookmarksMenu = new KonqBookmarkModelMenu(bookmarkModel, new     
+        KonqExtendedBookmarkMenuHelper(this), actionCollection(), this);
+    
+    KAction* actnBookmarksMenu = actionCollection()->addAction("bookmarks");
+    actnBookmarksMenu->setText(i18n("Bookmarks"));
+    actnBookmarksMenu->setMenu(bookmarksMenu);
+  #endif
 
   // The actual menu needs a different action collection, so that the bookmarks
   // don't appear in kedittoolbar
@@ -3929,9 +3962,22 @@
 
 void KonqExtendedBookmarkOwner::openBookmark(const KBookmark & bm, Qt::MouseButtons mb, Qt::KeyboardModifiers km)
 {
-    kDebug() << bm.url() << km << mb;
+    kDebug(1202) << bm.url() << km << mb;
+    m_pKonqMainWindow->openBookmark(bm.url(), mb, km);
+}
 
-    const QString url = bm.url().url();
+#ifdef HAVE_KONQBOOKMARK
+void KonqExtendedBookmarkMenuHelper::openBookmark(const KUrl& url)
+{
+    Qt::MouseButtons mb;
+    Qt::KeyboardModifiers km;
+    m_pKonqMainWindow->openBookmark(url, mb, km);
+}
+#endif
+ 
+void KonqMainWindow::openBookmark(const KUrl& url, Qt::MouseButtons mb, Qt::KeyboardModifiers km)
+{
+    kDebug(1202) << url << km << mb;
 
     KonqOpenURLRequest req;
     req.browserArgs.setNewTab(true);
@@ -3943,17 +3989,17 @@
     }
 
     if( km & Qt::ControlModifier ) { // Ctrl Left/MMB
-        m_pKonqMainWindow->openFilteredUrl( url, req);
+        openFilteredUrl( url.url(), req );
     } else if( mb & Qt::MidButton ) {
         if(KonqSettings::mmbOpensTab()) {
-            m_pKonqMainWindow->openFilteredUrl( url, req);
+            openFilteredUrl( url.url(), req );
         } else {
-            KUrl finalURL = KonqMisc::konqFilteredURL( m_pKonqMainWindow, url );
+            KUrl finalURL = KonqMisc::konqFilteredURL( this, url.url() );
             KonqMisc::createNewWindow( finalURL );
         }
     }
     else {
-        m_pKonqMainWindow->openFilteredUrl( url, false );
+        openFilteredUrl( url.url(), false );
     }
 }
 
@@ -4303,7 +4349,42 @@
   }
   actionCollection()->action( "quit" )->setEnabled( true );
 }
+ 
+#ifdef HAVE_KONQBOOKMARK
+KonqBookmark KonqExtendedBookmarkMenuHelper::currentPlace() const
+{
+    KonqBookmark bookmark;
+    bookmark.setTitle(m_pKonqMainWindow->currentTitle());
+    bookmark.setUrl(m_pKonqMainWindow->currentView()->url());
+    return bookmark;
+}
 
+
+bool KonqExtendedBookmarkMenuHelper::supportsTabs() const
+{
+  return true;
+}
+
+QList<KonqBookmark> KonqExtendedBookmarkMenuHelper::currentPlacesList() const
+{
+  QList<KonqBookmark> list;
+  KonqFrameTabs* tabContainer = m_pKonqMainWindow->viewManager()->tabContainer();
+
+  foreach ( KonqFrameBase* frame, tabContainer->childFrameList() )
+  {
+    if ( !frame || !frame->activeChildView() )
+      continue;
+    if( frame->activeChildView()->locationBarURL().isEmpty() )
+      continue;
+    KonqBookmark konqBookmark;
+    konqBookmark.setTitle(frame->activeChildView()->caption());
+    konqBookmark.setUrl(frame->activeChildView()->url());
+    list << konqBookmark;
+  }
+  return list;
+}
+#endif
+
 void KonqMainWindow::disableActionsNoView()
 {
     // No view -> there are some things we can't do
@@ -4431,6 +4512,18 @@
 
 void KonqExtendedBookmarkOwner::openInNewTab(const KBookmark &bm)
 {
+    m_pKonqMainWindow->openBookmark(bm.url());
+}
+
+#ifdef HAVE_KONQBOOKMARK
+void KonqExtendedBookmarkMenuHelper::openInNewTab(const KUrl &url)
+{
+    m_pKonqMainWindow->openBookmark(url);
+}
+#endif
+
+void KonqMainWindow::openBookmark(const KUrl &url)
+{
   bool newTabsInFront = KonqSettings::newTabsInFront();
   if (QApplication::keyboardModifiers() & Qt::ShiftModifier)
     newTabsInFront = !newTabsInFront;
@@ -4441,11 +4534,23 @@
   req.openAfterCurrentPage = false;
   req.forceAutoEmbed = true;
 
-  m_pKonqMainWindow->openUrl( 0, bm.url(), QString(), req );
+  openUrl( 0, url.url(), QString(), req );
 }
 
 void KonqExtendedBookmarkOwner::openFolderinTabs(const KBookmarkGroup &grp)
 {
+  m_pKonqMainWindow->openInNewTabs(grp.groupUrlList());
+}
+
+#ifdef HAVE_KONQBOOKMARK
+void KonqExtendedBookmarkMenuHelper::openInNewTabs(const QList<KUrl> &urls)
+{
+  m_pKonqMainWindow->openInNewTabs(urls);
+}
+#endif
+
+void KonqMainWindow::openInNewTabs(const QList<KUrl> &urls)
+{
   bool newTabsInFront = KonqSettings::newTabsInFront();
   if (QApplication::keyboardModifiers() & Qt::ShiftModifier)
     newTabsInFront = !newTabsInFront;
@@ -4455,30 +4560,30 @@
   req.openAfterCurrentPage = false;
   req.forceAutoEmbed = true;
 
-  const QList<KUrl> list = grp.groupUrlList();
-  if (list.isEmpty())
+  if (urls.isEmpty())
     return;
 
-  if (list.size() > 20) {
-    if(KMessageBox::questionYesNo(m_pKonqMainWindow,
-				  i18n("You have requested to open more than 20 bookmarks in tabs. "
+  
+  if (urls.size() > 20) {
+    if(KMessageBox::questionYesNo(this,
+                  i18n("You have requested to open more than 20 bookmarks in tabs. "
                                        "This might take a while. Continue?"),
-				  i18n("Open bookmarks folder in new tabs")) != KMessageBox::Yes)
+                  i18n("Open bookmarks folder in new tabs")) != KMessageBox::Yes)
       return;
   }
 
-  QList<KUrl>::ConstIterator it = list.constBegin();
-  QList<KUrl>::ConstIterator end = list.constEnd();
+  QList<KUrl>::ConstIterator it = urls.constBegin();
+  QList<KUrl>::ConstIterator end = urls.constEnd();
   --end;
   for (; it != end; ++it )
   {
-    m_pKonqMainWindow->openUrl( 0, *it, QString(), req );
+     openUrl( 0, *it, QString(), req );
   }
   if ( newTabsInFront )
   {
     req.newTabInFront = true;
   }
-  m_pKonqMainWindow->openUrl( 0, *end, QString(), req );
+  openUrl( 0, *end, QString(), req );
 }
 
 void KonqExtendedBookmarkOwner::openInNewWindow(const KBookmark &bm)
@@ -4486,6 +4591,13 @@
   KonqMisc::createNewWindow( bm.url(), KParts::OpenUrlArguments() );
 }
 
+#ifdef HAVE_KONQBOOKMARK
+void KonqExtendedBookmarkMenuHelper::openInNewWindow(const KUrl &url)
+{
+  KonqMisc::createNewWindow( url, KParts::OpenUrlArguments() );
+}
+#endif
+
 QString KonqMainWindow::currentTitle() const
 {
   return m_currentView ? m_currentView->caption() : QString();
Index: apps/konqueror/src/tests/CMakeLists.txt
===================================================================
--- apps/konqueror/src/tests/CMakeLists.txt	(revision 1040547)
+++ apps/konqueror/src/tests/CMakeLists.txt	(working copy)
@@ -1,7 +1,8 @@
 if (NOT WIN32)
 
 set( EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR} )
-include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/.. ${KDE4_INCLUDES} )
+# ${CMAKE_CURRENT_BINARY_DIR}/..  used for config-konqueror.h
+include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/.. ${CMAKE_CURRENT_BINARY_DIR}/.. ${KDE4_INCLUDES} )
 
 ########### centralwidget ###############
 
Index: apps/konqueror/src/CMakeLists.txt
===================================================================
--- apps/konqueror/src/CMakeLists.txt	(revision 1040547)
+++ apps/konqueror/src/CMakeLists.txt	(working copy)
@@ -1,3 +1,12 @@
+macro_optional_find_package(KonqBookmark)
+macro_log_feature(KonqBookmark_FOUND "KonqBookmark" "KonqBookmark" "http://www.kde.org" FALSE "" "New Konqueror Bookmarks based on Nepomuk and Akonadi")
+macro_bool_to_01(KonqBookmark_FOUND HAVE_KONQBOOKMARK)
+
+if(HAVE_KONQBOOKMARK)
+    find_package(KdepimLibs REQUIRED)
+    find_package(Nepomuk REQUIRED)
+endif(HAVE_KONQBOOKMARK)
+
 if(KDE4_BUILD_TESTS)
     # only with this definition will the KONQ_TESTS_EXPORT macro do something
     add_definitions(-DCOMPILING_TESTS)
@@ -12,8 +21,13 @@
 # TODO KDE_MALLINFO_FIELD_usmblks
 configure_file(config-konqueror.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-konqueror.h )
 
-# For crc32 in konqhistorymanager.cpp
-include_directories( ${ZLIB_INCLUDE_DIR} )
+# ZLIB For crc32 in konqhistorymanager.cpp
+# KDEPIMIBS and NEPOMUK for KonqBookmark
+include_directories(
+    ${ZLIB_INCLUDE_DIR}
+    ${KDEPIMLIBS_INCLUDE_DIRS} 
+    ${NEPOMUK_INCLUDE_DIRS}
+)
 
 ########### libkonquerorprivate, shared with sidebar modules ###############
 
@@ -90,6 +104,12 @@
   target_link_libraries(kdeinit_konqueror ${X11_LIBRARIES})
 endif (UNIX)
 
+if (HAVE_KONQBOOKMARK)
+  target_link_libraries(kdeinit_konqueror
+    konqbookmark
+    ${KDEPIMLIBS_AKONADI_LIBS}
+    ${NEPOMUK_LIBRARIES})
+endif (HAVE_KONQBOOKMARK)
 
 if (NOT WIN32)
     install(TARGETS kdeinit_konqueror  ${INSTALL_TARGETS_DEFAULT_ARGS} )
Index: apps/lib/konq/CMakeLists.txt
===================================================================
--- apps/lib/konq/CMakeLists.txt	(revision 1040547)
+++ apps/lib/konq/CMakeLists.txt	(working copy)
@@ -51,6 +51,9 @@
 
 install( FILES directory_bookmarkbar.desktop   DESTINATION  ${DATA_INSTALL_DIR}/kbookmark )
 install( FILES
+ konq_historyentry.h
+ konq_historyloader.h
+ konq_historyprovider.h
  konq_popupmenu.h
  konq_popupmenuinformation.h
  konq_popupmenuplugin.h
Index: workspace/plasma/generic/runners/nepomuksearch/nepomuksearchrunner.cpp
===================================================================
--- workspace/plasma/generic/runners/nepomuksearch/nepomuksearchrunner.cpp	(revision 1040547)
+++ workspace/plasma/generic/runners/nepomuksearch/nepomuksearchrunner.cpp	(working copy)
@@ -30,6 +30,8 @@
 
 #include <Nepomuk/Resource>
 #include <Nepomuk/ResourceManager>
+#include <nepomuk/ontologies/bookmark.h>
+#include <nepomuk/ontologies/dataobject.h>
 
 #include <Soprano/Vocabulary/NAO>
 
@@ -134,6 +136,12 @@
     if (res.hasType( Soprano::Vocabulary::NAO::Tag())) {
         url.setProtocol("nepomuksearch");
         url.setPath(QString("/hasTag:\"%1\"").arg(res.genericLabel()));
+    } else if(res.hasType(Nepomuk::Bookmark::resourceTypeUri())) {
+        Nepomuk::Bookmark bookmark(res);
+        if(!bookmark.bookmarkses().empty())
+            url = bookmark.bookmarkses().first().label();
+        else
+            url = res.resourceUri();
     } else {
         url = res.resourceUri();
     }
@@ -157,7 +165,19 @@
 
     Nepomuk::Resource res = match.data().value<Nepomuk::Resource>();
 
-    KUrl url(res.resourceUri());
+    
+    kDebug() << res.resourceUri();
+    KUrl url;
+    
+    if(res.hasType(Nepomuk::Bookmark::resourceTypeUri())) {
+        Nepomuk::Bookmark bookmark(res);
+        if(!bookmark.bookmarkses().empty())
+            url = bookmark.bookmarkses().first().label();
+        else
+            url = res.resourceUri();
+    } else {
+        url = res.resourceUri();
+    }
     KIO::UDSEntry entry;
     if (!KIO::NetAccess::stat(url.path(), entry, 0)) {
         return QList<QAction*>();
Index: workspace/plasma/generic/runners/nepomuksearch/queryclientwrapper.cpp
===================================================================
--- workspace/plasma/generic/runners/nepomuksearch/queryclientwrapper.cpp	(revision 1040547)
+++ workspace/plasma/generic/runners/nepomuksearch/queryclientwrapper.cpp	(working copy)
@@ -25,6 +25,8 @@
 
 #include <Nepomuk/Resource>
 #include <Nepomuk/Types/Class>
+#include <nepomuk/ontologies/bookmark.h>
+#include <nepomuk/ontologies/dataobject.h>
 
 #include <Soprano/Vocabulary/Xesam>
 
@@ -99,19 +101,31 @@
         Nepomuk::Resource res(result.resourceUri());
 
         QString type;
+        
+        // Defaults
+        QString text = res.genericLabel();
+        QString subtext = Nepomuk::Types::Class(res.resourceType()).label();
+        QString s = res.genericIcon();
+        KIcon icon = KIcon(s.isEmpty() ? QString("nepomuk") : s);
+
         if (res.hasType(Soprano::Vocabulary::Xesam::File()) ||
             res.resourceUri().scheme() == "file") {
-            type = KMimeType::findByUrl(res.resourceUri())->comment();
-        } else {
-            type = Nepomuk::Types::Class(res.resourceType()).label();
+            subtext = KMimeType::findByUrl(res.resourceUri())->comment();
+        } else if(res.hasType(Nepomuk::Bookmark::resourceTypeUri())) {
+            Nepomuk::Bookmark bookmark(res);
+            if(!bookmark.titles().empty())
+                text = bookmark.titles().first();
+            
+            if(!bookmark.bookmarkses().empty())
+                subtext = bookmark.bookmarkses().first().label();
+        
+            icon = KIcon(s.isEmpty() ? QString("bookmarks") : s);
         }
 
-        match.setText(res.genericLabel());
-        match.setSubtext(type);
+        match.setText(text);
+        match.setSubtext(subtext);
+        match.setIcon(icon);
 
-        QString s = res.genericIcon();
-        match.setIcon(KIcon(s.isEmpty() ? QString("nepomuk") : s));
-
         match.setData(qVariantFromValue(res));
         match.setId(res.resourceUri().toString());
         matches << match;
Index: workspace/plasma/generic/runners/nepomuksearch/CMakeLists.txt
===================================================================
--- workspace/plasma/generic/runners/nepomuksearch/CMakeLists.txt	(revision 1040547)
+++ workspace/plasma/generic/runners/nepomuksearch/CMakeLists.txt	(working copy)
@@ -25,6 +25,7 @@
   ${KDE4_PLASMA_LIBS}
   nepomukquery
   nepomukqueryclient
+  ontologies
 )
 
 install(
