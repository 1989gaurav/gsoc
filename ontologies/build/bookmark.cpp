/*
 * This file is part of the Nepomuk KDE project.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 */

/*
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
 */

#include <nepomuk/tools.h>
#include <nepomuk/variant.h>
#include <nepomuk/resourcemanager.h>
#include "bookmark.h"

#include "dataobject.h"
#include "bookmarkfolder.h"
#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>


Nepomuk::Bookmark::Bookmark()
  : InformationElement( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark") )
{
}


Nepomuk::Bookmark::Bookmark( ResourceManager* manager )
  : InformationElement( QUrl(), QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark"), manager )
{
}


Nepomuk::Bookmark::Bookmark( const Bookmark& res )
  : InformationElement( res )
{
}


Nepomuk::Bookmark::Bookmark( const Nepomuk::Resource& res )
  : InformationElement( res )
{
}


Nepomuk::Bookmark::Bookmark( const QString& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark") )
{
}

Nepomuk::Bookmark::Bookmark( const QString& uri, ResourceManager* manager )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark"), manager )
{
}

Nepomuk::Bookmark::Bookmark( const QUrl& uri )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark") )
{
}

Nepomuk::Bookmark::Bookmark( const QUrl& uri, ResourceManager* manager )
  : InformationElement( uri, QUrl::fromEncoded("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark"), manager )
{
}

Nepomuk::Bookmark::Bookmark( const QString& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk::Bookmark::Bookmark( const QString& uri, const QUrl& type, ResourceManager* manager )
  : InformationElement( uri, type, manager )
{
}

Nepomuk::Bookmark::Bookmark( const QUrl& uri, const QUrl& type )
  : InformationElement( uri, type )
{
}

Nepomuk::Bookmark::Bookmark( const QUrl& uri, const QUrl& type, ResourceManager* manager )
  : InformationElement( uri, type, manager )
{
}

Nepomuk::Bookmark::~Bookmark()
{
}


Nepomuk::Bookmark& Nepomuk::Bookmark::operator=( const Bookmark& res )
{
    Resource::operator=( res );
    return *this;
}


QString Nepomuk::Bookmark::resourceTypeUri()
{
    return "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark";
}

QList<Nepomuk::DataObject> Nepomuk::Bookmark::bookmarkses() const
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    return convertResourceList<DataObject>( property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks") ).toResourceList() );
}

void Nepomuk::Bookmark::setBookmarkses( const QList<Nepomuk::DataObject>& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    QList<Resource> l;
    for( QList<DataObject>::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks"), Variant( l ) );
}

void Nepomuk::Bookmark::addBookmarks( const Nepomuk::DataObject& value )
{
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
    Variant v = property( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks") );
    v.append( Resource( value ) );
    setProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks"), v );
}

QUrl Nepomuk::Bookmark::bookmarksUri()
{
    return QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bookmarks");
}

QList<Nepomuk::BookmarkFolder> Nepomuk::Bookmark::containsBookmarkOf() const
{
    return convertResourceList<BookmarkFolder>( manager()->allResourcesWithProperty( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#containsBookmark"), *this ) );
}

QList<Nepomuk::Bookmark> Nepomuk::Bookmark::allBookmarks()
{
    return Nepomuk::convertResourceList<Bookmark>( ResourceManager::instance()->allResourcesOfType( QUrl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark") ) );
}


